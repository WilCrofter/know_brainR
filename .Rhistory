source('~/dev/r/know_brainR/R/vsd_spectrum.R')
temp <- vsd_spectrum(100)
matplot(temp[,1], temp[,2:3], type='l', lwd=2, lty=1)
matplot(temp[,1], temp[,2:3], type='l', lwd=2, lty=1, main="Toy NIR/VSD Emission Spectrum", xlab="Wavelength (nm)", ylab="Probability Density")
legend('topright', c("Polarized", "Depolarized"), lwd=2, lty=1, col=1:2)
source('~/dev/r/know_brainR/R/vsd_spectrum.R', echo=TRUE)
matplot(temp[,1], temp[,2:3], type='l', lwd=2, lty=1, main="Toy NIR/VSD Emission Spectrum", xlab="Wavelength (nm)", ylab="Probability Density")
?sample
source('~/dev/r/know_brainR/R/emitter.R')
source('~/dev/r/know_brainR/R/vsd_spectrum.R')
spec <- vsd_spectrum(100)
head(spec)
source('~/dev/r/know_brainR/R/vsd_spectrum.R')
spec <- vsd_spectrum(100)
head(spec)
tail(spec)
pol <- emit(n, spec[,1:2])
pol <- emit(100, spec[,1:2])
unp <- emit(100, spec[,c(1,3)])
hist(pol)
hist(unp)
h = 6.626e-34  # joule·s --Planck's constant
c = 2.998e+108 # m/s  --Speed of light in vacuum
k = 1.38065e−23 # joule/°K --Boltzmann's constant
Temp = 305 # °K --approximate skin temperature (NOTE: T generally stands for TRUE in R)
k <- 1.38065e−23
k <- 1.38065e-23 # joule/°K --Boltzmann's constant
h*c/(k*T)
h*c/(k*Temp)
Temp
Planck's Law is $$ \frac{2h\nu^3}{c^2}\frac{1}{e^{\frac{h\nu}{kT}}-1} $$
= \frac{2h\nu^3}{c^2}\frac{1}{e^{\frac{h\nu}{kT}}-1}
)
}
$$
'
Planck's Law: $$I(\nu,T) = \frac{2h\nu^3}{c^2}\frac{1}{e^{\frac{h\nu}{kT}}-1} $$
''
k*c/(k*Temp*lambda)
lambda <- 10e-6
lambda
lambda <- 1e-6
lambda
exp(1)
e
_e
e_
log10n <- 2*log10(lambda) - log10(exp(1))*h*c/(k*Temp*lambda)
hc_over_kTlambda <- h*c/(k*Temp*lambda)
10^12
require(knitr)
knit("knits/thermal_noise.Rmd")
?knit
knit("Rmds/thermal_noise.Rmd", "thermal_noise.html")
knit2html("Rmds/thermal_noise.Rmd", "thermal_noise.html")
299792458
h <- 6.626e-34  # joule·s --Planck's constant
c <- 2.998e+8 # m/s  --Speed of light in vacuum
k <- 1.38065e-23 # joule/°K --Boltzmann's constant
Temp <- 305  # °K --approximate skin temperature (NOTE: T generally stands for TRUE in R)
lambda <- 1e-06
hc_over_kTlambda <- h*c/(k*Temp*lambda)
h <- 6.626e-34  # joule·s --Planck's constant
c <- 2.998e+8 # m/s  --Speed of light in vacuum
k <- 1.38065e-23 # joule/°K --Boltzmann's constant
Temp <- 305  # °K --approximate skin temperature (NOTE: T generally stands for TRUE in R)
lambda <- 1e-06
hc_over_kTlambda <- h*c/(k*Temp*lambda)
n <- 2/lambda^2/(exp(hc_over_kTlambda)-1)
h <- 6.626e-34  # joule·s --Planck's constant
c <- 2.998e+8 # m/s  --Speed of light in vacuum
k <- 1.38065e-23 # joule/°K --Boltzmann's constant
Temp <- 305  # °K --approximate skin temperature (NOTE: T generally stands for TRUE in R)
lambda <- 1e-06
hc_over_kTlambda <- h*c/(k*Temp*lambda)
n <- 2/lambda^2/(exp(hc_over_kTlambda)-1)
require(knitr)
knit2html("Rmds/thermal_noise.Rmd")
knit2html("Rmds/thermal_noise.Rmd")
knit2html("Rmds/thermal_noise.Rmd")
spp <- 1/n
knit2html("Rmds/thermal_noise.Rmd")
knit2html("Rmds/thermal_noise.Rmd")
knit2html("Rmds/thermal_noise.Rmd")
knit2html("Rmds/thermal_noise.Rmd")
sprintf("%e",spp)
sprintf("%f",spp)
12/4/3
.25*2.54
sqrt(40^2 + 6.3^2)
0.03^(1/40.0)
sqrt(40^2 + 12^2)
0.03^(1/42.0)
4*pi*40^2
h <- 6.626e-34  # joule·s --Planck's constant
c <- 2.998e+8 # m/s  --Speed of light in vacuum
k <- 1.38065e-23 # joule/°K --Boltzmann's constant
Temp <- 305  # °K --approximate skin temperature (NOTE: T generally stands for TRUE in R)
lambda <- 1e-06
hc_over_kTlambda <- h*c/(k*Temp*lambda)
h*c
k*T*lambda
10e+03
1e+03
60*60*1000
.5^(1/360000)
1-.5^(1/360000)
1-.5^(60*60*1000)
.5^(60*60*1000
)
1-.5^(-60*60*1000)
1-.5^(-60*60*1000)
.5^(1/(60*60*100))
.5^(1/(60*60*1000))
1-.5^(1/(60*60*1000))
(1-.5^(1/(60*60*1000)))*6.022e+11
sample(5)
sample(5)
find.packages("base")
find.package("base")
sqrt(10^2 + 40^2)
0.0309^(1/sqrt(10^2 + 40^2))
pi
x <- seq(0, 50, by=1)
b <- 10
r <- sqrt(b^2 + x^2)
y <- 0.92^r * b/(4 * pi * r^(3/2))
plot(y ~ x, type='l', lwd=3, main="Fraction of photons reaching a 1 mm square area\at a distance of x mm from a point above the emission site.", xlab="lateral distance from emission site", ylab="survival fraction")
plot(y ~ x, type='l', lwd=3, main="Fraction of photons reaching a 1 mm square area\nat a distance of x mm from a point above the emission site.", xlab="lateral distance from emission site", ylab="survival fraction")
require(knitr)
setwd("Rmds")
knit2html("loss.Rmd")
surviving_photons(x, b){
d <- sqrt(x^2 + b^2)
0.92^d*b/(4*pi*d^1.5)
}
surviving_photons <- function(x, b){
d <- sqrt(x^2 + b^2)
0.92^d*b/(4*pi*d^1.5)
}
scalp <- matrix(nrow=50, ncol=50)
scalp <- matrix(numeric(), nrow=50, ncol=50)
scalp <- matrix(0, nrow=50, ncol=50)
?mapply
pi
surviving_photons <- function(m, n, b){
d <- sqrt(m^2 + n^2 + b^2)
0.92^d*b/(4*pi*d^1.5)
}
add_contribution <- function(scalp, m, n, b){
mapply(function(h, w){scalp[h,w] <- scalp[m,n] + surviving_photons(m-h, n-w, b)},1:50, 1:50)
scalp
}
scalp <- add_contributions(matrix(0, nrow=50, ncol=50), 25, 25, 10)
scalp <- add_contribution(matrix(0, nrow=50, ncol=50), 25, 25, 10)
?image
plot(scalp)
image(1:50, 1:50, scalp)
scalp <- scalp/max(scalp)
max(scalp)
scalp <- add_contribution(matrix(0, nrow=50, ncol=50), 25, 25, 10)
scalp[1:5, 1:5]
scalp[20:20, 20:30]
scalp[20:30, 20:30]
add_contribution <- function(scalp, m, n, b){
for(h in 1:nrow(scalp)){
for(w in 1:ncol(scalp)){
scalp[h,w] <- scalp[m,n] + surviving_photons(m-h, n-w, b)
}
}
scalp
}
scalp <- add_contribution(matrix(0, nrow=50, ncol=50), 25, 25, 10)
scalp[20:30, 20:30]
scalp <- scalp/max(scalp)
scalp[25:30, 25:30]
image(1:51, 1:51, scalp)
image(1:50, 1:50, scalp)
add_contribution <- function(scalp, m, n, b){
for(h in 1:nrow(scalp)){
for(w in 1:ncol(scalp)){
scalp[h,w] <- scalp[h,w] + surviving_photons(m-h, n-w, b)
}
}
scalp
}
scalp[1:5, 1:5]
image(1:50, 1:50, scalp)
scalp <- add_contribution(matrix(0, nrow=51, ncol=51), 25, 25, 10)
scalp <- scalp/max(scalp)
image(1:50, 1:50, scalp)
image(1:51, 1:51, scalp)
image(1:51, 1:51, scalp, x="mm", y="mm")
image(1:51, 1:51, scalp, xlab="mm", ylab="mm")
scalp <- matrix(0, 51, 51)
scalp <- matrix(0, 51, 51)
for(y in 1:51){
for(x in 1:y){
scalp <- add_contribution(scalp, x, y, 10)
}
}
scalp <- scalp/max(scalp)
image(1:51, 1:51, scalp)
scalp <- matrix(0, 51, 51)
scalp <- add_contribution(scalp, 20, 40)
scalp <- add_contribution(scalp, 20, 40, 10)
scalp <- add_contribution(scalp, 40, 20, 10)
image(1:51, 1:51, scalp)
scalp <- matrix(0, 51, 51)
scalp <- add_contribution(scalp, 1, 1, 10)
image(1:51, 1:51, scalp)
scalp <- add_contribution(scalp, 1, 2, 10)
scalp <- add_contribution(scalp, 2, 1, 10)
image(1:51, 1:51, scalp)
scalp <- add_contribution(scalp, 1, 3, 10)
scalp <- add_contribution(scalp, 2, 2, 10)
scalp <- add_contribution(scalp, 3, 3, 10)
image(1:51, 1:51, scalp)
for(j in 1:4)scalp <- add_contribution(scalp, j, 4-j, 10)
image(1:51, 1:51, scalp)
for(j in 1:5)scalp <- add_contribution(scalp, j, 5-j, 10)
image(1:51, 1:51, scalp)
source('~/dev/r/know_brainR/R/loss.R')
spectr <- vsd_spectrum(100)
source("sims.R")
source('~/dev/r/know_brainR/Rmds/sims.R')
spectr <- vsd_spectrum(100)
spectr <- vsd_spectrum(100)
cortex <- matrix(0,51,51)
cortex[15:35, 20:51] <- 1
cortex[40:50,5:10] <- 1
image(1:51, 1:51, cortex)
cortex <- matrix(0,51,51)
cortex[25:51, 20:40] <- 1
cortex[5:10, 5:10] <- 1
image(1:51, 1:51, cortex)
cortex <- matrix(0,51,51)
cortex[25:45, 20:40] <- 1
cortex[10:15, 10:15] <- 1
image(1:51, 1:51, cortex)
image(1:51, 1:51, cortex, xlab="mm", ylab="mm", main="Pattern of Depolarization\at Cerebral Cortex")
image(1:51, 1:51, cortex, xlab="mm", ylab="mm", main="Pattern of Depolarization\nat Cerebral Cortex")
topo.colors(2)
image(1:51, 1:51, cortex, xlab="mm", ylab="mm", main="Pattern of Depolarization\nat Cerebral Cortex", col=topo.colors(12))
image(1:51, 1:51, cortex, xlab="mm", ylab="mm", main="Pattern of Depolarization\nat Cerebral Cortex", col=terrain.colors(12))
terrain.colors(12)
legend('topleft', c("Polarized", "Depolarized"), bg="white", fill=c("#00A600FF", "#F2F2F2FF"))
topo.colors(12)
