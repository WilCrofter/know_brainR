xfer_fct <- function(r, b){
r1 <- sqrt(r^2+b^2)
r*b*.92^r1/(4*pi*r1^1.5)
}
local({
r <- seq(0, 50, by=1)
b <- 10
y <- xfer_fct(r, 10)
plot(y ~ r, type='l', lwd=3, main="Fraction of photons reaching a 1 mm square area\nat a distance of r mm from a point above the emission site.", xlab="r, radial distance from a point above the emission site in mm", ylab="survival fraction")
})
plot(f, spectrum, type='l', log='y', lwd=2, xlab="spatial frequency (cycles/mm)", ylab="amplitude", main="Cerebral Cortex to Scalp Transfer Funcion")
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
xform <- function(f, b){
integrand <- function(r){r*f_b(r,b)*besselJ(2*pi*f*r,0)}
integrate(integrand, 0, Inf)
}
xform(1/3, 10)
xform(0, 10)
xform(1/6, 10)
xform(1/12, 10)
xform(1/10, 10)
f <- seq(0, 1/3, length.out=50)
spectrum <- sapply(f, function(phi)xform(phi, 10)$value)
range(spectrum)
range(abs(spectrum))
xform(1/5, 10)
xform(.15, 10)
xform(.1, 10)
xform(.12, 10)
xform(.13, 10)
1/.13
1/.14
xform(.14, 10)
xform(.15, 10)
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
xform <- function(f, b){
integrand <- function(r){r*f_b(r,b)*besselJ(2*pi*f*r,0)}
integrate(integrand, 0, Inf)
}
xform <- function(f, b){
integrand <- function(r){r*f_b(r,b)*besselJ(2*pi*f*r,0)}
integrate(integrand, 0, Inf)
}
xform(1/3, b)
xform(1/3, 10)
xform(0,10)
xform(.3,10)
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
xform <- function(freq, b){
integrand <- function(r){r*f_b(r,b)*besselJ(2*pi*freq*r,0)}
integrate(integrand, 0, Inf)
}
xform(.1, 10)
xform(.2, 10)
xform(.3, 10)
xform(.33, 10)
xform(1/3, 10)
xform(1, 10)
xform(.5, 10)
integrand <- function(r, b)r*b/2/(b^2 + r^2)^1.5
b <- 10
integrate(function(r)integrand(r,10), 0, 10)
integrate(function(r)integrand(r,10), 0, 100)
integrate(function(r)integrand(r,10), 0, Inf)
temp <- matrix(0, 51, 51)
temp <- matrix(0,25,25)
for(i in 1:25){
for(j in 1:25){
r <- sqrt(i^2+j^2)
temp[i,j] <- b/(4*pi*r^3)
}
}
sum(temp)
b <- 10
temp <- matrix(0,25,25)
for(i in 1:25){
for(j in 1:25){
r <- sqrt(i^2+j^2+b^2)
temp[i,j] <- b/(4*pi*r^3)
}
}
sum(temp)
temp <- matrix(0,101,101)
for(i in 1:25){
for(j in 1:25){
r <- sqrt(i^2+j^2+b^2)
temp[i,j] <- b/(4*pi*r^3)
}
}
sum
sum(temp)
4*sum(temp)
b <- 10
n <- 101
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
r <- sqrt(i^2+j^2+b^2)
temp[i,j] <- b/(4*pi*r^3)
}
}
sum(temp)
b <- 10
n <- 151
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
r <- sqrt(i^2+j^2+b^2)
temp[i,j] <- b/(4*pi*r^3)
}
}
4*sum(temp)
n <- 201
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
r <- sqrt(i^2+j^2+b^2)
temp[i,j] <- b/(4*pi*r^3)
}
}
4*sum(temp)
---
0
b <- 10
n <- 201
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
rsq <- i^2+j^2+b^2
temp[i,j] <- b/(4*pi*rsq^1.5)
}
}
4*sum(temp)
b <- 10
n <- 201
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
rsq <- i^2+j^2+b^2
temp[i,j] <- b*.92*sqrt(rsq)/(4*pi*rsq^1.5)
}
}
4*sum(temp)
b <- 10
n <- 201
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
rsq <- i^2+j^2+b^2
temp[i,j] <- b*.92^sqrt(rsq)/(4*pi*rsq^1.5)
}
}
4*sum(temp)
b <- 10
n <- 101
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
rsq <- i^2+j^2+b^2
temp[i,j] <- b*.92^sqrt(rsq)/(4*pi*rsq^1.5)
}
}
4*sum(temp)
b <- 10
n <- 51
temp <- matrix(0,n,n)
for(i in 1:n){
for(j in 1:n){
rsq <- i^2+j^2+b^2
temp[i,j] <- b*.92^sqrt(rsq)/(4*pi*rsq^1.5)
}
}
4*sum(temp)
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
integrand <- function(r)r*f_b(r, 10)
integrate(integrand, 10, Inf)
integrate(integrand, 0, Inf)
integrate(integrand, 50, Inf)
integrate(integrand, 100, Inf)
integrate(integrand, 500, Inf)
integrate(integrand, 300, Inf)
integrate(integrand, 200, Inf)
integrate(integrand, 250, Inf)
250*250
integrate(integrand, 256, Inf)
512*512
integrate(integrand, 128, Inf)
integrate(integrand, 0, Inf)
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
integrand <- function(r)r*f_b(r, 10)
integrand <- function(r)r*f_b(r, 10)
integrate(integrand, 64, Inf)
integrate(integrand, 96, Inf)
128/1.5
_*2
85*2
integrate(integrand, 128, Inf)/integrate(integrand, 0, Inf)
integrate(integrand, 128, Inf)$value/integrate(integrand, 0, Inf)$value
integrate(integrand, 64, Inf)$value/integrate(integrand, 0, Inf)$value
integrate(integrand, 96, Inf)$value/integrate(integrand, 0, Inf)$value
512x512
512*512
filter <- matrix(0,512,512)
for(i in 1:128){
for(j in 1:128){
r <- sqrt(i^2 + j^2)
if(r <= 128){
temp <- f_b(r, 10)
filter[256-i, 256-j] <- temp
filter[256+i, 256-j] <- temp
filter[256-i, 256+j] <- temp
filter[256+i, 256+j] <- temp
}
}
}
?fft
fft(c(1,1,1,1))
fft(matrix(c(1,1,1,1), 2)
)
fft(matrix(c(1,0,0,0), 2))
fft(matrix(c(1,0,0,0), 2))/4
fft(fft(matrix(c(1,0,0,0), 2))/4, inverse=TRUE)/4
fft(fft(matrix(c(1,0,0,0), 2))/2, inverse=TRUE)/2
filter_spectrum <- fft(filter)/512
range(abs(filter_spectrum))
?contour
filter_spectrum[256-128, 256-128]
abs(filter_spectrum[256-128, 256-128])
abs(filter_spectrum[256, 256])
abs(filter_spectrum[250, 250])
contour(z=filter)
x <- 256:(256+64)
plot(x, filter[x, 256], type='l')
filter[256:264, 256:264]
filter[256:260, 256:260]
rm(filter_spectrum)
filter <- matrix(0,512,512)
for(i in 0:128){
for(j in 0:128){
r <- sqrt(i^2 + j^2)
if(r <= 128){
temp <- f_b(r, 10)
filter[256-i, 256-j] <- temp
filter[256+i, 256-j] <- temp
filter[256-i, 256+j] <- temp
filter[256+i, 256+j] <- temp
}
}
}
filter[256:260, 256:260]
contour(z=filter)
plot(x, filter[x, 256], type='l')
filter_spectrum <- fft(filter)/512
plot(x, abs(filter[x, 256]), type='l')
plot(x, abs(filter_spectrum[x, 256]), type='l')
contour(z=abs(filter_spectrum))
plot(1:50, abs(filter_spectrum[1:50, 1]), type='l')
plot(1:50, filter[256:305, 256], type='l')
lines(1:50, abs(filter_spectrum[1:50, 1]), type='l')
filter_spectrum <- fft(filter_specturm, inverse=TRUE)/512
filter_spectrum <- fft(filter_spectrumm, inverse=TRUE)/512
filter_spectrum <- fft(filter_spectrum, inverse=TRUE)/512
abs(filter-filter_spectrum)
range(abs(filter-filter_spectrum))
filter_spectrum <- fft(filter)/512
sum(filter^2)
sum(filter_spectrum^2)
contour(z=abs(filter_spectrum[1:50, 1:50]))
?contour
contour(z=abs(filter_spectrum[1:15, 1:15]))
contour(z=abs(filter_spectrum[1:25, 1:25]))
contour(z=log(abs(filter_spectrum[1:25, 1:25])))
contour(z=log(abs(filter_spectrum[1:50, 1:50])))
512/3
filter_spectrum[512, 170]
abs(filter_spectrum[512, 170])
max(abs(filter_spectrum[512, 170]))
max(abs(filter_spectrum))
max(abs(filter_spectrum[512, 51]))
eigenval_3mm_res <- abs(filter_spectrum[512, 170])
eigenval_10mm_res <- abs(filter_spectrum[512, 51])
err_on_inverse <- max(abs(filter - fft(filter_spectrum, inverse=TRUE)/512))
err_on_power <- abs(sum(filter^2) - sum(filter_spectrum^2))
filter_spectrum <- fft(filter)/512
eigenval_3mm_res <- abs(filter_spectrum[512, 170])
eigenval_10mm_res <- abs(filter_spectrum[512, 51])
err_on_inverse <- max(abs(filter - fft(filter_spectrum, inverse=TRUE)/512))
err_on_power <- sum(filter^2)/sum(filter_spectrum^2)
rm(err_on_power)
abs(filter_spectrum[512, floor(512/8)])
abs(filter_spectrum[512, floor(512/5)])
abs(filter_spectrum[512, floor(512/7)])
eigenval_3mm_res
eigenval_10mm_res
eigenval_max <- max(abs(filter_spectrum))
eigenval_max
plot(1:256, abs(filter_spect[512, 1:256]), type='l', log=)
# Estimates fraction of photons which will reach the scalp at a point r mm distant
# from the point directly over their origin, assuming their origin is b mm beneath
# the scalp.
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
integrand <- function(r)r*f_b(r, 10)
filter <- matrix(0,512,512)
for(i in 0:128){
for(j in 0:128){
r <- sqrt(i^2 + j^2)
if(r <= 128){
temp <- f_b(r, 10)
filter[256-i, 256-j] <- temp
filter[256+i, 256-j] <- temp
filter[256-i, 256+j] <- temp
filter[256+i, 256+j] <- temp
}
}
}
filter_spectrum <- fft(filter)/512
eigenval_3mm_res <- abs(filter_spectrum[512, 170])
eigenval_10mm_res <- abs(filter_spectrum[512, 51])
eigenval_max <- max(abs(filter_spectrum))
err_on_inverse <- max(abs(filter - fft(filter_spectrum, inverse=TRUE)/512))
plot(1:256, abs(filter_spect[512, 1:256]), type='l', log='y')
plot(1:256, abs(filter_spectrum[512, 1:256]), type='l', log='y')
freqs <- (1:256)/512
plot(1:256, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue spectrum of Model")
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue spectrum of Model")
line <- lm(abs(filter_spectrum[512, 1:(floor(.2*256))] ~ freqs[1:(floor(.2*256))]))
linear_region <- (floor(.05*256)):(floor(.2*256))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
line(frqs, exp(fit$fitted.values), lwd=2, lty=2, col="red")
lines(frqs, exp(fit$fitted.values), lwd=2, lty=2, col="red")
linear_region <- (floor(.05*512)):(floor(.2*512))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
lines(frqs+3, exp(fit$fitted.values), lwd=2, lty=2, col="red")
linear_region <- (floor(.05*512)):(floor(.2*512))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
lines(frqs, exp(fit$fitted.values), lwd=2, lty=2, col="red")
lines(frqs-.01, exp(fit$fitted.values), lwd=2, lty=2, col="red")
coef(fit)
log(10)/coef(fit)[2]
factor_of_10 <- log(10)/coef(fit)[2]
1/factor_of_10
text(.03, exp(1e-07), "Factor of 10 per 1/30 cycles/sec", col="red")
text(.03, 1e-07, "Factor of 10 per 1/30 cycles/sec", col="red")
text(.05, 1e-07, "Factor of 10\mper 1/30 cycles/sec", col="red")
text(.05, 1e-07, "Factor of 10\nper 1/30 cycles/sec", col="red")
text(.07, 1e-07, "Factor of 10 decrease\nper 1/30 cycles/sec", col="red")
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue Spectrum of Simple Model")
lines(frqs-.01, exp(fit$fitted.values), lwd=2, lty=2, col="red")
factor_of_10 <- log(10)/coef(fit)[2]
text(.07, 1e-06, "Factor of 10 decrease\nper 1/30 cycles/sec", col="red")
text(.065, 1e-06, "Factor of 10 decrease\nper 1/30 cycles/sec", col="red")
freqs <- (1:256)/512
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue Spectrum of Simple Model")
linear_region <- (floor(.05*512)):(floor(.2*512))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
lines(frqs-.01, exp(fit$fitted.values), lwd=2, lty=2, col="red")
factor_of_10 <- log(10)/coef(fit)[2]
text(.065, 1e-06, "Factor of 10 decrease\nper 1/30 cycles/sec", col="red")
freqs <- (1:256)/512
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue Spectrum of Simple Model")
linear_region <- (floor(.05*512)):(floor(.2*512))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
lines(frqs-.01, exp(fit$fitted.values), lwd=2, lty=2, col="red")
factor_of_10 <- log(10)/coef(fit)[2]
text(.065, 1e-06, "Factor of 10 decrease\nper 1/30 cycles/mm", col="red")
freqs <- (1:256)/512
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue Spectrum of Simple Model")
linear_region <- (floor(.05*512)):(floor(.2*512))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
lines(frqs-.01, exp(fit$fitted.values), lwd=2, lty=2, col="red")
factor_of_10 <- log(10)/coef(fit)[2]
text(.2, 1e-05, "Factor of 10 decrease\nper 1/30 cycles/mm", col="red")
frqs
segments(frqs[28], evs[28], lwd=2, lty=3, col="green")
segments(frqs[28], evs[1], freqs[1], evs[28], lwd=2, lty=3, col="green")
-68*.
exp(6.8)
# Estimates fraction of photons which will reach the scalp at a point r mm distant
# from the point directly over their origin, assuming their origin is b mm beneath
# the scalp.
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
integrand <- function(r)r*f_b(r, 10)
filter <- matrix(0,512,512)
for(i in 0:128){
for(j in 0:128){
r <- sqrt(i^2 + j^2)
if(r <= 128){
temp <- f_b(r, 10)
filter[256-i, 256-j] <- temp
filter[256+i, 256-j] <- temp
filter[256-i, 256+j] <- temp
filter[256+i, 256+j] <- temp
}
}
}
filter_spectrum <- fft(filter)/512
eigenval_3mm_res <- abs(filter_spectrum[512, 170])
eigenval_10mm_res <- abs(filter_spectrum[512, 51])
eigenval_max <- max(abs(filter_spectrum))
err_on_inverse <- max(abs(filter - fft(filter_spectrum, inverse=TRUE)/512))
sum(filter_spectrum[1:51, 1:51]^2)/sum(filter_spectrum[1:256, 1:256])
sum(abs(filter_spectrum[1:51, 1:51])^2)/sum(abs(filter_spectrum[1:256, 1:256])^2)
sum(abs(filter_spectrum[1:51, 1:51])^2)
max(abs(filter_spectrum))
filter <- matrix(0,512,512)
# Estimates fraction of photons which will reach the scalp at a point r mm distant
# from the point directly over their origin, assuming their origin is b mm beneath
# the scalp.
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
integrand <- function(r)r*f_b(r, 10)
filter <- matrix(0,512,512)
for(i in 0:128){
for(j in 0:128){
r <- sqrt(i^2 + j^2)
if(r <= 128){
temp <- f_b(r, 10)
filter[256-i, 256-j] <- temp
filter[256+i, 256-j] <- temp
filter[256-i, 256+j] <- temp
filter[256+i, 256+j] <- temp
}
}
}
filter_spectrum <- fft(filter)/512
eigenval_3mm_res <- abs(filter_spectrum[512, 170])
eigenval_10mm_res <- abs(filter_spectrum[512, 51])
eigenval_max <- max(abs(filter_spectrum))
err_on_inverse <- max(abs(filter - fft(filter_spectrum, inverse=TRUE)/512))
freqs <- (1:256)/512
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue Spectrum")
linear_region <- (floor(.05*512)):(floor(.2*512))
evs <- log(abs(filter_spectrum[512, linear_region]))
frqs <- freqs[linear_region]
fit <- lm(evs ~ frqs)
lines(frqs-.01, exp(fit$fitted.values), lwd=2, lty=2, col="red")
factor_of_10 <- log(10)/coef(fit)[2]
text(.21, 1e-05, "A factor of 1000 decrease\nper .1 cycles/mm", col="red")
freqs <- (1:256)/512
plot(freqs, abs(filter_spectrum[512, 1:256]), type='l', lwd=2, log='y', xlab="spatial frequency in cycles/mm", ylab="absolute value of eigenvalue", main="Eigenvalue Spectrum")
filter <- matrix(0,512,512)
for(i in 0:128){
for(j in 0:128){
r <- sqrt(i^2 + j^2)
if(r <= 128){
temp <- f_b(r, 10)
filter[256-i, 256-j] <- temp
filter[256+i, 256-j] <- temp
filter[256-i, 256+j] <- temp
filter[256+i, 256+j] <- temp
}
}
}
# Estimates fraction of photons which will reach the scalp at a point r mm distant
# from the point directly over their origin, assuming their origin is b mm beneath
# the scalp.
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
integrand <- function(r)r*f_b(r, 10)
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
f_b <- function(r, b){
r1 <- sqrt(r^2+b^2)
b*.92^r1/(4*pi*r1^1.5)
}
